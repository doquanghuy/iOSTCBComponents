//
// Copyright Â© 2019 Backbase R&D B.V. All rights reserved.
//

import UIKit

/// Generic Card Slider View
/// Shows collection of Views, generated by instance of CardSliderViewBuilder
public class TCBCardSlider: UIView {
    private var lastContentOffset: CGFloat = 0

    @IBOutlet private weak var contentView: UIView!
    @IBOutlet private weak var collectionView: UICollectionView! {
        didSet {
            collectionView.backgroundColor = UIColor.clear
            collectionView.delegate = self
            collectionView.dataSource = self
            collectionView.showsHorizontalScrollIndicator = false
            collectionView.clipsToBounds = true
            collectionView.isPagingEnabled = false
            collectionView.register(of: TCBCardSliderCell.self)
        }
    }

    @IBOutlet private weak var pageControl: UIPageControl! {
        didSet {
            pageControl.numberOfPages = collection.count
            pageControl.backgroundColor = UIColor.clear
            pageControl.tintColor = UIColor.white.withAlphaComponent(0.5)
            pageControl.isUserInteractionEnabled = false
        }
    }

    // MARK: - Init

    public override init(frame: CGRect) {
        super.init(frame: frame)
        commonInit()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        commonInit()
    }

    private func commonInit() {
        let bundle = Bundle(for: type(of: self))
        let nibName = String(describing: type(of: self))
        bundle.loadNibNamed(nibName, owner: self, options: nil)
        
        addSubview(contentView)
        backgroundColor = UIColor.clear
        contentView.frame = bounds
        contentView.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        theme(style: TCBCardSliderDefaultStyle())
    }

    // MARK: - Public API

    public weak var delegate: TCBCardSliderDelegate?

    public weak var viewBuilder: TCBCardSliderViewBuilder?

    private(set) public var selectedItem: Int?

    public var collection: [TCBCardSliderItem] = [] {
        didSet {
            collectionView.reloadData()
            pageControl.numberOfPages = collection.count
        }
    }

    public func setTint(color: UIColor) {
        pageControl.currentPageIndicatorTintColor = color
        pageControl.pageIndicatorTintColor = color.withAlphaComponent(0.3)
    }

    public func setItemSize(size: CGSize,
                            spacing: CGFloat = 16,
                            style: TCBCardSlidingStyle = .centered) {
        collectionView.collectionViewLayout = TCBCarouselFlowLayout(itemSize: size, spacing: spacing, style: style)
        collectionView.setNeedsLayout()
    }

    public func selectItem(at index: Int) {
        guard index >= 0, index < collection.count else { return }
        selectedItem = index
        collectionView(collectionView, didSelectItemAt: IndexPath(row: index, section: 0))
    }

    public func updateItem(_ item: TCBCardSliderItem, at index: Int) {
        guard index >= 0, index < collection.count else { return }
        collection[index] = item
        collectionView.reloadItems(at: [IndexPath(row: index, section: 0)])
    }
}

extension TCBCardSlider: UICollectionViewDelegate, UICollectionViewDataSource {
    public func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }

    public func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return collection.count
    }

    public func collectionView(_ collectionView: UICollectionView,
                               cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard
            let cell = collectionView.dequeueReusableCell(of: TCBCardSliderCell.self, indexPath: indexPath),
            let cardView = viewBuilder?.createViewFor(item: collection[indexPath.row])
            else { return UICollectionViewCell() }

        cell.setCardView(cardView)
        return cell
    }

    public func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let index = indexPath.row
        selectedItem = index
        pageControl.currentPage = index
        collectionView.scrollToItem(at: indexPath, at: .centeredHorizontally, animated: true)
        delegate?.didSelectItem(item: collection[index])
    }

    public func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let point = scrollView.contentOffset
        lastContentOffset = point.x
    }

    public func scrollViewWillEndDragging(_ scrollView: UIScrollView,
                                   withVelocity velocity: CGPoint,
                                   targetContentOffset: UnsafeMutablePointer<CGPoint>) {
        let avrItemSize = collectionView.contentSize.width / CGFloat(collection.count)
        let pageNumber = Int(round(targetContentOffset.pointee.x / avrItemSize))
        pageControl.currentPage = pageNumber
        selectedItem = pageNumber
        delegate?.didSelectItem(item: collection[pageNumber])
    }
}

extension TCBCardSlider: TCBThemeableComponent {
    typealias Style = TCBCardSliderStyle

    func theme(style: Style) {
        self.collectionView.backgroundColor = style.collectionViewBackgroundColor
        self.pageControl.backgroundColor = style.pageControlBackgroundColor
        self.pageControl.currentPageIndicatorTintColor = style.pageControlCurrentPageIndicatorTintColor
    }
}
